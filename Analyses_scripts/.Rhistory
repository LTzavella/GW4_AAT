)
)
)
)
)
)
)
)
)
)
)
))
# Subset AAT data
AAT_data <- lapply(data, subset,
select = c(
"script.subjectid", "blockcode", "trialcode", "rt", "values.x", "values.y", "condition", "values.aat_correct",
"values.init_correct", "values.final_correct", "values.init_time", "display.canvasheight",
"display.canvaswidth", "values.initial_response", "values.final_response"
),
(blockcode == "pre_aat" | blockcode == "post_aat") & condition != "nan" & trialcode != "aat_break" & trialcode != "clear_screen"
& trialcode != "pre_aat" & trialcode != "post_aat"
)
# Create unique trial numbers for both pre- and post-AAT blocks
AAT_data <- lapply(AAT_data, transform, trial = ifelse(trialcode == "start_aat", 1, 0))
AAT_data <- lapply(AAT_data, transform, trial = ave(trial, FUN = cumsum))
# Correct lagged coordinates
AAT_data <- lapply(AAT_data, transform, mousey = lead(values.y, 1))
AAT_data <- lapply(AAT_data, transform, mousex = lead(values.x, 1))
# RT values on start_aat trial events should be 0. This step is important for the interpolation, if this is not set to 0, it won't work properly.
AAT_data <- lapply(AAT_data, transform, rt = ifelse(trialcode == "start_aat", 0, rt))
# Extract relevant data from the lists and replicate for each trial 100 times to bind with interpolated data
# Interpolation will not include 'iti_aat' trials as these affect the results and are not part of mouse trajectories
# Please note that this may take a few minutes
AAT_inter <- lapply(AAT_data, function(i) cbind(
ddply(subset(i, trialcode != "iti_aat"), .(trial, condition), interp),
ddply(i, .(trial), function(x) cbind(
repr(x$values.init_correct[x$trialcode == "iti_aat"], 100),
repr(x$values.final_correct[x$trialcode == "iti_aat"], 100),
repr(x$values.aat_correct[x$trialcode == "iti_aat"], 100),
repr(x$display.canvasheight[1], 100),
repr(x$display.canvaswidth[1], 100),
repr(x$values.init_time[x$trialcode == "iti_aat"], 100),
repr(x$values.initial_response[x$trialcode == "iti_aat"], 100),
repr(x$values.final_response[x$trialcode == "iti_aat"], 100),
repr(x$script.subjectid[1], 100)
))
))
# Remove trial number which was added again
AAT_inter <- lapply(AAT_inter, subset, select = c(1:5, 7:15))
# Rename new columns
new_colnames <- c("trial", "condition", "rt", "mousey", "mousex", "init_correct", "final_correct", "aat_correct", "height", "width", "init_time", "init_response", "final_response", "id")
AAT_inter <- lapply(AAT_inter, setnames, new_colnames)
# Record then the margin top/low is hit including the pixel tolerance 0.0125% of display canvas height,
# as included in the Inquisit script for the study
AAT_inter <- lapply(AAT_inter, transform, hit = ifelse(mousey <= (0.0125 * as.numeric(as.character(height[1]))), "min_hit", ifelse(mousey >= (as.numeric(as.character(height[1])) - (0.0125 * as.numeric(as.character(height[1])))), "max_hit", "no_hit")))
# Create a variable for sample number
AAT_inter <- lapply(AAT_inter, transform, number = rep(1:100, n = 216))
# Create a variable for total rt when either the bottom or the top of the screen has been reached
AAT_inter <- lapply(AAT_inter, transform, total_rt = ifelse(hit == "max_hit" | hit == "min_hit", rt, 0))
# Number the samples in which this condition is met so that we can take the first time a margin is hit
AAT_inter <- lapply(AAT_inter, transform, sample = ifelse(total_rt > 0, 1, 0))
AAT_inter <- lapply(AAT_inter, transform, sample = ave(sample, cumsum(sample == 0), FUN = cumsum))
# Add a variable for capturing different types of incorrect responses
AAT_inter <- lapply(AAT_inter, transform, action = ifelse(condition == "pre_pull_go" | condition == "pre_pull_nogo" |
condition == "pre_pull_filler" | condition == "post_pull_nogo" |
condition == "post_pull_go" | condition == "post_pull_filler", "pull", "push"))
AAT_inter <- lapply(AAT_inter, transform, response_change = ifelse(action == "pull" & init_response == "push" & final_response == "push", "inc_avoid",
ifelse(action == "pull" & init_response == "push" & final_response == "pull", "init_avoid",
ifelse(action == "push" & init_response == "pull" & final_response == "pull", "inc_approach",
ifelse(action == "push" & init_response == "pull" & final_response == "push", "init_approach",
ifelse(action == "pull" & init_response == "pull" & final_response == "pull", "cor_approach",
ifelse(action == "push" & init_response == "push" & final_response == "push", "cor_avoid",
"other"
)
)
)
)
)
))
# Register accuracy
AAT_inter <- lapply(AAT_inter, transform, accuracy = ifelse(init_correct == 1 & final_correct == 1 & sample >= 1, 1, 0))
# Subset data for descriptive statistics- one row per trial
# We either select the last sample (100) when accuracy is 0 or the first sample of a registered RT
AAT_acc <- lapply(AAT_inter, subset, (number == 100 & accuracy == 0) | (sample == 1 & accuracy == 1))
AAT_acc <- lapply(AAT_acc, transform, init_time = as.numeric(as.character(init_time)))
AAT_acc <- lapply(AAT_acc, transform, motor_time = total_rt - init_time)
AAT_acc <- lapply(AAT_acc, transform, condition = as.factor(condition))
# Create subsetfor correct responses only to measure RT outcomes
AAT_RTs <- lapply(AAT_acc, subset, accuracy == 1)
# Recode accuracy values into 0s and 1s to get mean error rates
AAT_ERs <- lapply(AAT_acc, transform, accuracy = as.integer(ifelse(accuracy == 1, "0", "1")))
AAT_RTs <- ldply(AAT_RTs, fun_AAT_RTs)
AAT_ERs <- ldply(AAT_ERs, fun_AAT_ERs)
AAT_sum <- cbind(AAT_RTs, AAT_ERs[2:19])
# Bias score calculated as (MedianRTpush - MedianRTpull) for pre- and post- training and the a Delta AAT bias score is obtained
AAT_sum$Pre_Go_bias <- (AAT_sum$Pre.Push.Go.RT - AAT_sum$Pre.Pull.Go.RT)
AAT_sum$Pre_NoGo_bias <- (AAT_sum$Pre.Push.NoGo.RT - AAT_sum$Pre.Pull.NoGo.RT)
AAT_sum$Pre_Filler_bias <- (AAT_sum$Pre.Push.Filler.RT - AAT_sum$Pre.Pull.Filler.RT)
AAT_sum$Post_Go_bias <- (AAT_sum$Post.Push.Go.RT - AAT_sum$Post.Pull.Go.RT)
AAT_sum$Post_NoGo_bias <- (AAT_sum$Post.Push.NoGo.RT - AAT_sum$Post.Pull.NoGo.RT)
AAT_sum$Post_Filler_bias <- (AAT_sum$Post.Push.Filler.RT - AAT_sum$Post.Pull.Filler.RT)
AAT_sum$D_Go <- (AAT_sum$Post_Go_bias) - (AAT_sum$Pre_Go_bias)
AAT_sum$D_NoGo <- (AAT_sum$Post_NoGo_bias) - (AAT_sum$Pre_NoGo_bias)
AAT_sum$D_Filler <- (AAT_sum$Post_Filler_bias) - (AAT_sum$Pre_Filler_bias)
# Select training (GNG) trials that include accuraacy and RT outcomes
gng <- lapply(data, subset, blockcode == "gng" & trialcode != "break" & trialcode != "clear_screen")
# Create subset of correct responses only for RT outcomes
gng_rt <- lapply(gng, subset, values.gng_correct == 1)
# Recode accuracy values into 0s and 1s
# Coding is reversed to get the proportion of error rates (PE); i.e., 1=incorrect; 0=correct
gng_pe <- lapply(gng, transform, accuracy = as.integer(ifelse(values.gng_correct == 1, "0", "1")))
# Apply functions and get dataframes with RT and PE outcomes
gng_RTs <- ldply(gng_rt, fun_gng_RTs)
gng_PEs <- ldply(gng_pe, fun_gng_PEs)
# Change proportion of error rates (PE) into proportion of correct responses (PC) and bind outcomes together into one dataframe
gng_PEs$FillerGo.PC <- 1 - gng_PEs$FillerGo.PE
gng_PEs$FillerNoGo.PC <- 1 - gng_PEs$FillerNoGo.PE
gng_PEs$Go.PC <- 1 - gng_PEs$Go.PE
gng_PEs$NoGo.PC <- 1 - gng_PEs$NoGo.PE
GNG_sum <- cbind(gng_RTs, gng_PEs[2:9])
# Percentage of errors in AAT (either pre or post) > 25%
excl1 <- unique(AAT_sum$.id[AAT_sum$Pre.ER > 0.25 | AAT_sum$Post.ER > 0.25])
# Percentage of correct responses in no-signal trials <85% (cf. Adams et al. 2016)
excl2 <- unique(GNG_sum$.id[GNG_sum$Go.PC < 0.85])
# Mean GoRT > 3 SDs from the group mean. Note that group mean applies to all data before any other exclusions have been applied
GNG_sum$goRT_rm <- ifelse(GNG_sum$Go.RT > (mean(GNG_sum$Go.RT) + (3 * (sd(GNG_sum$Go.RT)))), "1", "0")
excl3 <- unique(GNG_sum$.id[GNG_sum$goRT_rm == 1])
# Percentage of errors on signal trials > 3 SDs from the group mean
GNG_sum$PE_rm <- ifelse(GNG_sum$NoGo.PE > (mean(GNG_sum$NoGo.PE) + (3 * (sd(GNG_sum$NoGo.PE)))), "1", "0")
excl4 <- unique(GNG_sum$.id[GNG_sum$PE_rm == 1])
# We inspected the summary data output from Inquisit for the exclusion of participants that may have provided a food rating of 50 (i.e. neutral)
# systematically, that is, for 14 or more trials either pre- or post- training, but there were no participants meeting this exclusion
# Store eligible IDs and apply criteria to the list of data files
inclIDs <- as.integer(IDs)
inclIDs <- inclIDs[!inclIDs %in% excl1]
inclIDs <- inclIDs[!inclIDs %in% excl2]
inclIDs <- inclIDs[!inclIDs %in% excl3]
inclIDs <- inclIDs[!inclIDs %in% excl4]
inclIDs2 <- as.integer(IDs)
inclIDs2 <- inclIDs2[!inclIDs2 %in% excl2]
inclIDs2 <- inclIDs2[!inclIDs2 %in% excl3]
inclIDs2 <- inclIDs2[!inclIDs2 %in% excl4]
# Keep a copy of AAT data
AAT_copy <- AAT_inter
AAT_sum_copy <- AAT_sum
# this dataset includes all AAT descriptives but the AAT accuracy criterion has not been applied
# we will use this for exploratory analyses
AAT_copy <- AAT_copy[sapply(AAT_copy, function(x) any(x$id %in% inclIDs2))]
AAT_sum_copy <- subset(AAT_sum_copy, .id %in% inclIDs2)
AAT_excl <- subset(AAT_sum_copy, .id %in% excl1)
write.csv(AAT_excl, file = here("csvs", "AAT_excl.csv"), row.names = FALSE)
# Remove from all relevant datasets
data <- data[sapply(data, function(x) any(x$script.subjectid %in% inclIDs))]
AAT_inter <- AAT_inter[sapply(AAT_inter, function(x) any(x$id %in% inclIDs))]
AAT_data <- AAT_data[sapply(AAT_data, function(x) any(x$script.subjectid %in% inclIDs))]
AAT_acc <- AAT_acc[sapply(AAT_acc, function(x) any(x$id %in% inclIDs))]
GNG_sum <- subset(GNG_sum, .id %in% inclIDs)
AAT_sum <- subset(AAT_sum, .id %in% inclIDs)
write.csv(AAT_sum, file = here("csvs", "AAT_sum.csv"), row.names = FALSE)
write.csv(GNG_sum, file = here("csvs", "GNG_sum.csv"), row.names = FALSE)
write.csv(AAT_sum_copy, file = here("csvs", "AAT_sum_incl.csv"), row.names = FALSE)
ratings <- lapply(data, subset, blockcode == "pre_ratings" | blockcode == "post_ratings")
ratings <- lapply(ratings, subset, trialcode != "clear_screen" & trialcode != "ratings_instruct")
ratings <- lapply(ratings, transform, food_category = ifelse(trialcode == "food1_food_rating", "go_savoury",
ifelse(trialcode == "food2_food_rating", "go_sweet",
ifelse(trialcode == "food3_food_rating", "nogo_savoury",
ifelse(trialcode == "food4_food_rating", "nogo_sweet",
ifelse(trialcode == "food5_food_rating", "filler_savoury", "filler_sweet")
)
)
)
))
mean_ratings <- ldply(ratings, fun_ratings)
mean_ratings$DLiking_Go <- mean_ratings$Post.Liking.Go - mean_ratings$Pre.Liking.Go
mean_ratings$DLiking_Nogo <- mean_ratings$Post.Liking.Nogo - mean_ratings$Pre.Liking.Nogo
mean_ratings$DLiking_Filler <- mean_ratings$Post.Liking.Filler - mean_ratings$Pre.Liking.Filler
write.csv(mean_ratings, file = here("csvs", "Ratings_sum.csv"), row.names = FALSE)
# exclude_neg_ratings <- subset(mean_ratings, Pre.Liking.Go >=60 & Pre.Liking.Nogo >=60 & Pre.Liking.Filler >=60 )
# write.csv(exclude_neg_ratings, file=here("csvs", "pos_sum.csv"), row.names = FALSE)
ratings_grand <- ldply(ratings, function(x) grand_mean <- mean(x$values.rating[x$blockcode == "pre_ratings"]))
# all_data <- cbind(all_data, ratings_grand)
#' Normalise' food choices according to the total number of responses per participant (i.e., proportion)
sum <- read.csv(file = here("summary_processed.csv"))
AAT_cor <- lapply(AAT_acc, subset, accuracy==1)
AAT_init <- ldply(AAT_cor, fun_AAT_init)
fun_AAT_init <- function (x) {
c(Pre.Pull.Filler.in= median(x$init_time[x$condition== "pre_pull_filler"]),
Pre.Push.Filler.in= median(x$init_time[x$condition== "pre_push_filler"]),
Pre.Pull.Go.in= median(x$init_time[x$condition== "pre_pull_go"]),
Pre.Push.Go.in= median(x$init_time[x$condition== "pre_push_go"]),
Pre.Pull.NoGo.in= median(x$init_time[x$condition== "pre_pull_nogo"]),
Pre.Push.NoGo.in= median(x$init_time[x$condition== "pre_push_nogo"]),
Post.Pull.Filler.in= median(x$init_time[x$condition== "post_pull_filler"]),
Post.Push.Filler.in= median(x$init_time[x$condition== "post_push_filler"]),
Post.Pull.Go.in= median(x$init_time[x$condition== "post_pull_go"]),
Post.Push.Go.in= median(x$init_time[x$condition== "post_push_go"]),
Post.Pull.NoGo.in= median(x$init_time[x$condition== "post_pull_nogo"]),
Post.Push.NoGo.in= median(x$init_time[x$condition== "post_push_nogo"]),
Pre.Pull.in= median(x$init_time[x$condition== "pre_pull_filler"|x$condition== "pre_pull_go"|x$condition== "pre_pull_nogo"]),
Pre.Push.in= median(x$init_time[x$condition== "pre_push_filler"|x$condition== "pre_push_go"|x$condition== "pre_push_nogo"]),
Post.Pull.in=  median(x$init_time[x$condition== "post_pull_filler"|x$condition== "post_pull_go"|x$condition== "post_pull_nogo"]),
Post.Push.in= median(x$init_time[x$condition== "post_push_filler"|x$condition== "post_push_go"|x$condition== "post_push_nogo"]))
}
AAT_cor <- lapply(AAT_acc, subset, accuracy==1)
AAT_init <- ldply(AAT_cor, fun_AAT_init)
#Bias score calculated as (MedianRTpush - MedianRTpull) for pre- and post- training and the a Delta AAT bias score is obtained
AAT_init$Pre_Go_bias = (AAT_init$Pre.Push.Go.in - AAT_init$Pre.Pull.Go.in)
AAT_init$Pre_NoGo_bias = (AAT_init$Pre.Push.NoGo.in - AAT_init$Pre.Pull.NoGo.in)
AAT_init$Pre_Filler_bias = (AAT_init$Pre.Push.Filler.in - AAT_init$Pre.Pull.Filler.in)
AAT_init$Post_Go_bias = (AAT_init$Post.Push.Go.in - AAT_init$Post.Pull.Go.in)
AAT_init$Post_NoGo_bias = (AAT_init$Post.Push.NoGo.in - AAT_init$Post.Pull.NoGo.in)
AAT_init$Post_Filler_bias = (AAT_init$Post.Push.Filler.in - AAT_init$Post.Pull.Filler.in)
AAT_init$D_Go = (AAT_init$Post_Go_bias) - (AAT_init$Pre_Go_bias)
AAT_init$D_NoGo = (AAT_init$Post_NoGo_bias) - (AAT_init$Pre_NoGo_bias)
AAT_init$D_Filler = (AAT_init$Post_Filler_bias) - (AAT_init$Pre_Filler_bias)
AAT_init$Pre_Bias = AAT_init$Pre.Push.in - AAT_init$Pre.Pull.in
AAT_init$Post_Bias = AAT_init$Post.Push.in - AAT_init$Pre.Pull.in
AAT_init$D_Bias <- AAT_init$Post_Bias - AAT_init$Pre_Bias
#Export csv file
write.csv(AAT_init, file=here("csvs", "aat_init.csv"), row.names = FALSE)
AAT_init$script.subjectid <- as.integer(AAT_init$.id)
AAT_init <- AAT_init %>% arrange(desc(script.subjectid))
retest <- as.data.frame(rbind(all_data[c(2, 84:86)], AAT_init[c(30, 27:29)]))
retest$measure <- c(rep("Completion time", 163), rep("Initiation time", 163))
p1 <- ggplot(retest, aes(y = Pre_Bias, x = Post_Bias)) +
geom_point(size = 3, alpha = 0.6, aes(color = D_Bias)) +
geom_abline(intercept = 0, slope = 1, alpha = 0.6, color = "black", lwd = 0.55) +
labs(y = expression(AAT["pre"] ~ (ms)), x = expression(AAT["post"] ~ (ms))) +
scale_color_viridis_c(option = "magma", guide = "colourbar", space = "Lab", begin = 0, end = 0.85, direction = 1) +
labs(color = "ΔAAT\n(ms)") + ylim(-300, 200) + xlim(-300, 200) +
theme(legend.text = element_text(size = 16)) +
facet_grid(~measure, space = "free_x") + theme_cowplot(font_family = "Palatino", font_size = 18) +
theme(strip.text.x = element_text(margin = margin(0.3, 0, 0.3, 0, "cm")), legend.text.align = 1, panel.spacing = unit(3, "lines"))
required.packages <- c(
"cowplot", "dplyr", "reshape2", "ggplot2", "ggpubr", "viridis", "here",
"lavaan", "caTools", "bitops"
)
new.packages <- required.packages[!(required.packages %in% installed.packages()[, "Package"])]
if (length(new.packages) > 0) {
install.packages(required.packages)
}
require(cowplot)
require(dplyr)
require(reshape2)
require(ggplot2)
require(ggpubr)
require(viridis)
require(here)
require(lavaan)
require(caTools)
require(bitops)
source("Rainclouds.R")
p1 <- ggplot(retest, aes(y = Pre_Bias, x = Post_Bias)) +
geom_point(size = 3, alpha = 0.6, aes(color = D_Bias)) +
geom_abline(intercept = 0, slope = 1, alpha = 0.6, color = "black", lwd = 0.55) +
labs(y = expression(AAT["pre"] ~ (ms)), x = expression(AAT["post"] ~ (ms))) +
scale_color_viridis_c(option = "magma", guide = "colourbar", space = "Lab", begin = 0, end = 0.85, direction = 1) +
labs(color = "ΔAAT\n(ms)") + ylim(-300, 200) + xlim(-300, 200) +
theme(legend.text = element_text(size = 16)) +
facet_grid(~measure, space = "free_x") + theme_cowplot(font_family = "Palatino", font_size = 18) +
theme(strip.text.x = element_text(margin = margin(0.3, 0, 0.3, 0, "cm")), legend.text.align = 1, panel.spacing = unit(3, "lines"))
# legend.position = "bottom", legend.spacing.x = element_text(size=2)
# legend.justification = c(1, 1)
p1
ggsave("graphs/test_retest.png", dpi = 300, width = 14, height = 7)
p1 <- ggplot(retest, aes(y = Pre_Bias, x = Post_Bias)) +
geom_point(size = 3, alpha = 0.6, aes(color = D_Bias)) +
geom_abline(intercept = 0, slope = 1, alpha = 0.6, color = "black", lwd = 0.55) +
labs(y = expression(AAT["pre"] ~ (ms)), x = expression(AAT["post"] ~ (ms))) +
scale_color_viridis_c(option = "magma", guide = "colourbar", space = "Lab", begin = 0, end = 0.85, direction = 1) +
labs(color = "ΔAAT\n(ms)") + ylim(-300, 200) + xlim(-300, 200) +
theme(legend.text = element_text(size = 16)) +
facet_grid(~measure, space = "free_x") + theme_cowplot(font_family = "Palatino", font_size = 18) +
theme(strip.text.x = element_text(margin = margin(0.3, 0, 0.3, 0, "cm")), legend.text.align = 1, panel.spacing = unit(3, "lines"))
# legend.position = "bottom", legend.spacing.x = element_text(size=2)
# legend.justification = c(1, 1)
p1
ggsave("graphs/test_retest.png", dpi = 300, width = 18, height = 7)
p1 <- ggplot(retest, aes(y = Pre_Bias, x = Post_Bias)) +
geom_point(size = 3, alpha = 0.6, aes(color = D_Bias)) +
geom_abline(intercept = 0, slope = 1, alpha = 0.6, color = "black", lwd = 0.55) +
labs(y = expression(AAT["pre"] ~ (ms)), x = expression(AAT["post"] ~ (ms))) +
scale_color_viridis_c(option = "magma", guide = "colourbar", space = "Lab", begin = 0, end = 0.85, direction = 1) +
labs(color = "ΔAAT\n(ms)") + ylim(-300, 200) + xlim(-300, 200) +
theme(legend.text = element_text(size = 16)) +
facet_grid(~measure, space = "free_x") + theme_cowplot(font_family = "Palatino", font_size = 18) +
theme(strip.text.x = element_text(margin = margin(0.3, 0, 0.3, 0, "cm")), legend.text.align = 1, panel.spacing = unit(3, "lines"))
# legend.position = "bottom", legend.spacing.x = element_text(size=2)
# legend.justification = c(1, 1)
p1
ggsave("graphs/test_retest.png", dpi = 300, width = 16, height = 7)
ggplot(graph_data, aes(x = Training_condition, y = Bias_score, fill = Time)) +
geom_flat_violin(aes(fill = Time), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = TRUE, alpha = 0.7, colour = NA, show.legend = FALSE) +
geom_point(aes(x = as.numeric(Training_condition) - .15, y = Bias_score, colour = Time), position = position_jitter(width = .05), size = 1.25, shape = 20, alpha = 0.8, show.legend = FALSE) +
geom_boxplot(aes(x = Training_condition, y = Bias_score, fill = Time), outlier.shape = NA, alpha = 0.8, width = .1, colour = "black") +
scale_fill_viridis(option = "magma", begin = 0.3, end = 0.65, discrete = TRUE) + scale_color_viridis(option = "magma", begin = 0.3, end = 0.65, discrete = TRUE) +
geom_line(data = sum_bias, aes(x = as.numeric(Training_condition) + .1, y = Bias_score_mean, group = Time, colour = Time), linetype = 3, show.legend = FALSE, size = 0.75) +
labs(x = "Training condition \n", y = "Bias scores (ms) \n") + theme_pubr(base_family = "Palatino", base_size = 14) +
guides(fill = guide_legend(title = "Time")) + theme(legend.text = element_text(size = 14)) +
geom_point(data = sum_bias, aes(x = as.numeric(Training_condition) + .1, y = Bias_score_mean, group = Time, colour = Time), shape = 22, size = 2, color = "black")
ggsave("graphs/bias_raincloud.png", dpi = 300, width = 10, height = 6)
#Create block numbers for the GNG data
gng <- lapply(gng, transform, block = c(rep.int(1, 36), rep.int(2, 36), rep.int(3, 36), rep.int(4, 36), rep.int(5, 36), rep.int(6, 36)))
gng_cor <-lapply(gng, subset, values.gng_correct==1)
block_RTs <- ldply(gng_cor, fun_gng_RTs_blocks)
fun_gng_RTs_blocks <- function (x) {
c(FillerGo.RT.B1= mean(x$values.gng_rt[(x$values.gng_trial_type=="filler_go_left" | x$values.gng_trial_type=="filler_go_right") & x$block=="1"]),
FillerGo.RT.B2= mean(x$values.gng_rt[(x$values.gng_trial_type=="filler_go_left" | x$values.gng_trial_type=="filler_go_right") & x$block=="2"]),
FillerGo.RT.B3= mean(x$values.gng_rt[(x$values.gng_trial_type=="filler_go_left" | x$values.gng_trial_type=="filler_go_right") & x$block=="3"]),
FillerGo.RT.B4= mean(x$values.gng_rt[(x$values.gng_trial_type=="filler_go_left" | x$values.gng_trial_type=="filler_go_right") & x$block=="4"]),
FillerGo.RT.B5= mean(x$values.gng_rt[(x$values.gng_trial_type=="filler_go_left" | x$values.gng_trial_type=="filler_go_right") & x$block=="5"]),
FillerGo.RT.B6= mean(x$values.gng_rt[(x$values.gng_trial_type=="filler_go_left" | x$values.gng_trial_type=="filler_go_right") & x$block=="6"]),
Go.RT.B1= mean(x$values.gng_rt[(x$values.gng_trial_type=="go_left" | x$values.gng_trial_type=="go_right") & x$block=="1"]),
Go.RT.B2= mean(x$values.gng_rt[(x$values.gng_trial_type=="go_left" | x$values.gng_trial_type=="go_right") & x$block=="2"]),
Go.RT.B3= mean(x$values.gng_rt[(x$values.gng_trial_type=="go_left" | x$values.gng_trial_type=="go_right") & x$block=="3"]),
Go.RT.B4= mean(x$values.gng_rt[(x$values.gng_trial_type=="go_left" | x$values.gng_trial_type=="go_right") & x$block=="4"]),
Go.RT.B5= mean(x$values.gng_rt[(x$values.gng_trial_type=="go_left" | x$values.gng_trial_type=="go_right") & x$block=="5"]),
Go.RT.B6= mean(x$values.gng_rt[(x$values.gng_trial_type=="go_left" | x$values.gng_trial_type=="go_right") & x$block=="6"])
)
}
fun_gng_PEs_blocks <- function (x) {
c(
FillerNoGo.PE.H1= mean(x$accuracy[(x$values.gng_trial_type=="filler_nogo_left" | x$values.gng_trial_type=="filler_nogo_right") & (x$block==1|x$block==2|x$block==3)]),
NoGo.PE.H1= mean(x$accuracy[(x$values.gng_trial_type=="nogo_left" | x$values.gng_trial_type=="nogo_right") & (x$block==1|x$block==2|x$block==3)]),
FillerNoGo.PE.H2= mean(x$accuracy[(x$values.gng_trial_type=="filler_nogo_left" | x$values.gng_trial_type=="filler_nogo_right") & (x$block==4|x$block==5|x$block==6)]),
NoGo.PE.H2= mean(x$accuracy[(x$values.gng_trial_type=="nogo_left" | x$values.gng_trial_type=="nogo_right") & (x$block==4|x$block==5|x$block==6)]))
}
#Create block numbers for the GNG data
gng <- lapply(gng, transform, block = c(rep.int(1, 36), rep.int(2, 36), rep.int(3, 36), rep.int(4, 36), rep.int(5, 36), rep.int(6, 36)))
gng_cor <-lapply(gng, subset, values.gng_correct==1)
block_RTs <- ldply(gng_cor, fun_gng_RTs_blocks)
block_RTs <- subset(block_RTs, .id %in% inclIDs)
block_RTs_graph <- tidyr::gather(block_RTs, 2:13, key="condition", value="GoRT")
block_RTs_graph$trial_type <- ifelse(grepl('Filler', block_RTs_graph$condition) == TRUE, "No-signal trial (control)", "No-signal trial (go)")
block_RTs_graph$block <- ifelse(grepl('B1', block_RTs_graph$condition) == TRUE, "1",
ifelse(grepl('B2', block_RTs_graph$condition) == TRUE, "2",
ifelse(grepl('B3', block_RTs_graph$condition) == TRUE, "3",
ifelse(grepl('B4', block_RTs_graph$condition) == TRUE, "4",
ifelse(grepl('B5', block_RTs_graph$condition) == TRUE, "5","6")))))
write.csv(block_RTs_graph, file=here("csvs", "block_RTs.csv"), row.names = FALSE)
gng_pes <- lapply(gng, transform, accuracy = as.integer(ifelse(values.gng_correct==1, "0", "1")))
block_PEs <- ldply(gng_pes, fun_gng_PEs_blocks)
block_PEs <- subset(block_PEs, .id %in% inclIDs)
block_PEs_graph <- tidyr::gather(block_PEs, 2:5, key="condition", value="PC")
block_PEs_graph$PC = 1 - block_PEs_graph$PC
block_PEs_graph$blocks <- ifelse(grepl('H1', block_PEs_graph$condition)==TRUE, "First", "Second")
block_PEs_graph$trial_type <- ifelse(grepl('FillerNoGo', block_PEs_graph$condition)==TRUE, "Signal (control)","Signal (no-go)")
write.csv(block_PEs_graph, file=here("csvs", "block_PEs.csv"), row.names = FALSE)
####
gng_graphs <- subset(GNG_sum, select=c(1, 9, 11))
gng_graphs <- tidyr::gather(gng_graphs, c(2:3), key="condition", value="PCsignal")
sum_gng_PEs <- summarySE(block_PEs_graph, measurevar = "PC", groupvars = c("trial_type", "blocks"))
gng_graphs$condition <- ifelse(gng_graphs$condition == "FillerNoGo.PC", "Signal (control)", "Signal (no-go)")
ggplot(gng_graphs, aes(x = condition, y = PCsignal, fill = condition)) +
geom_boxplot(aes(x = condition, y = PCsignal, fill = condition), outlier.shape = NA, alpha = 0.85, width = .1, colour = "black") +
scale_color_viridis(option = "inferno", begin = 0.45, end = 0.87, discrete = TRUE) +
scale_fill_viridis(option = "inferno", begin = 0.45, end = 0.87, discrete = TRUE) +
geom_flat_violin(aes(fill = condition), position = position_nudge(x = .3, y = 0), adjust = 1.5, trim = TRUE, alpha = 0.7, colour = NA, show.legend = FALSE) +
theme_pubr(base_size = 18, base_family = "Palatino", margin = TRUE) + guides(fill = guide_legend(title = "Trial type")) +
geom_point(data = gng_graphs, aes(x = as.numeric(as.factor(condition)) + .2, y = PCsignal, group = condition, colour = condition), alpha = 0.6, size = 1.25, show.legend = FALSE, position = position_jitter(width = 0.05)) +
labs(x = "", y = "Proportion of correct responses on signal trials") + theme(legend.text = element_text(size = 18)) +
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) + coord_flip() + scale_x_discrete(position = "left")
ggsave("graphs/PCsignal.png", dpi = 300, width = 8, height = 6)
sum_gng_PEs <- summarySE(block_PEs_graph, measurevar = "PC", groupvars = c("trial_type", "blocks"))
gng_graphs$condition <- ifelse(gng_graphs$condition == "FillerNoGo.PC", "Signal (control)", "Signal (no-go)")
ggplot(gng_graphs, aes(x = condition, y = PCsignal, fill = condition)) +
geom_boxplot(aes(x = condition, y = PCsignal, fill = condition), outlier.shape = NA, alpha = 0.85, width = .1, colour = "black") +
scale_color_viridis(option = "inferno", begin = 0.45, end = 0.87, discrete = TRUE) +
scale_fill_viridis(option = "inferno", begin = 0.45, end = 0.87, discrete = TRUE) +
geom_flat_violin(aes(fill = condition), position = position_nudge(x = .3, y = 0), adjust = 1.5, trim = TRUE, alpha = 0.7, colour = NA, show.legend = FALSE) +
theme_pubr(base_size = 18, base_family = "Palatino", margin = TRUE) + guides(fill = guide_legend(title = "Trial type")) +
geom_point(data = gng_graphs, aes(x = as.numeric(as.factor(condition)) + .2, y = PCsignal, group = condition, colour = condition), alpha = 0.6, size = 1.25, show.legend = FALSE, position = position_jitter(width = 0.05)) +
labs(x = "", y = "Proportion of correct responses on signal trials") + theme(legend.text = element_text(size = 18)) +
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) + coord_flip() + scale_x_discrete(position = "left")
ggsave("graphs/PCsignal.png", dpi = 300, width = 10, height = 7)
sum_gng_PEs <- summarySE(block_PEs_graph, measurevar = "PC", groupvars = c("trial_type", "blocks"))
gng_graphs$condition <- ifelse(gng_graphs$condition == "FillerNoGo.PC", "Signal (control)", "Signal (no-go)")
ggplot(gng_graphs, aes(x = condition, y = PCsignal, fill = condition)) +
geom_boxplot(aes(x = condition, y = PCsignal, fill = condition), outlier.shape = NA, alpha = 0.85, width = .1, colour = "black") +
scale_color_viridis(option = "inferno", begin = 0.45, end = 0.87, discrete = TRUE) +
scale_fill_viridis(option = "inferno", begin = 0.45, end = 0.87, discrete = TRUE) +
geom_flat_violin(aes(fill = condition), position = position_nudge(x = .3, y = 0), adjust = 1.5, trim = TRUE, alpha = 0.7, colour = NA, show.legend = FALSE) +
theme_pubr(base_size = 18, base_family = "Palatino", margin = TRUE) + guides(fill = guide_legend(title = "Trial type")) +
geom_point(data = gng_graphs, aes(x = as.numeric(as.factor(condition)) + .2, y = PCsignal, group = condition, colour = condition), alpha = 0.6, size = 1.25, show.legend = FALSE, position = position_jitter(width = 0.05)) +
labs(x = "", y = "Proportion of correct responses on signal trials") + theme(legend.text = element_text(size = 18)) +
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) + coord_flip() + scale_x_discrete(position = "left")
ggsave("graphs/PCsignal.png", dpi = 300, width = 10, height = 7)
GNG_sum$DNG <- GNG_sum$NoGo.PC - GNG_sum$FillerNoGo.PC
ggplot(GNG_sum, aes(y = NoGo.PC, x = FillerNoGo.PC)) +
geom_abline(intercept = 0, slope = 1, alpha = 0.6, color = "black", lwd = 0.55) +
geom_point(size = 3, alpha = 0.6, aes(color = DNG), position = "jitter") + labs(y = expression(PCsignal[nogo]), x = expression(PCsignal["control-nogo"])) +
scale_color_viridis_c(option = "viridis", guide = "colourbar", space = "Lab", begin = 0, end = 0.85, direction = 1) + theme_pubr(base_family = "Palatino", base_size = 18, margin = TRUE, legend = "right") + labs(color = ~Delta) + ylim(0.7, 1.02) + xlim(0.7, 1.02) + theme(legend.text.align = 1) + theme(legend.text = element_text(size = 16)) +
ggsave("graphs/PCsignal.png", dpi = 300, width = 8, height = 6)
ggplot(gng_graphs, aes(x = condition, y = PCsignal, fill = condition)) +
geom_boxplot(aes(x = condition, y = PCsignal, fill = condition), outlier.shape = NA, alpha = 0.85, width = .1, colour = "black") +
scale_color_viridis(option = "inferno", begin = 0.45, end = 0.87, discrete = TRUE) +
scale_fill_viridis(option = "inferno", begin = 0.45, end = 0.87, discrete = TRUE) +
geom_flat_violin(aes(fill = condition), position = position_nudge(x = .3, y = 0), adjust = 1.5, trim = TRUE, alpha = 0.7, colour = NA, show.legend = FALSE) +
theme_pubr(base_size = 18, base_family = "Palatino", margin = TRUE) + guides(fill = guide_legend(title = "Trial type")) +
geom_point(data = gng_graphs, aes(x = as.numeric(as.factor(condition)) + .2, y = PCsignal, group = condition, colour = condition), alpha = 0.6, size = 1.25, show.legend = FALSE, position = position_jitter(width = 0.05)) +
labs(x = "", y = "Proportion of correct responses on signal trials") + theme(legend.text = element_text(size = 18)) +
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) + coord_flip() + scale_x_discrete(position = "left")
choices <- subset(all_data, select = c(2, 43:45))
choices <- tidyr::gather(choices, 2:4, key = "condition", value = "prob")
choices$condition <- as.factor(choices$condition)
levels(choices$condition) <- c("Control", "Go", "No-go")
ggplot(choices, aes(x = condition, y = prob, fill = condition)) +
geom_point(aes(x = condition, y = prob, colour = condition), position = position_jitter(width = .05), size = 2, shape = 20, alpha = 0.8, show.legend = FALSE) +
geom_boxplot(aes(x = as.numeric(condition) + .15, y = prob, fill = condition), outlier.shape = NA, alpha = 0.8, width = .1, colour = "black") +
scale_fill_viridis(option = "plasma", begin = 0.4, end = 0.85, discrete = TRUE) + scale_color_viridis(option = "plasma", begin = 0.4, end = 0.85, discrete = TRUE) +
guides(fill = guide_legend(title = "Training condition")) +
labs(x = "Training condition", y = "Choice probability \n", fill = "\n") + theme_pubr(base_family = "Palatino", base_size = 18) + theme(legend.text = element_text(size = 18))
ggsave("graphs/choices.png", dpi = 300, width = 8, height = 6)
choices <- subset(all_data, select = c(2, 43:45))
choices <- tidyr::gather(choices, 2:4, key = "condition", value = "prob")
choices$condition <- as.factor(choices$condition)
levels(choices$condition) <- c("Control", "Go", "No-go")
ggplot(choices, aes(x = condition, y = prob, fill = condition)) +
geom_point(aes(x = condition, y = prob, colour = condition), position = position_jitter(width = .05), size = 2, shape = 20, alpha = 0.8, show.legend = FALSE) +
geom_boxplot(aes(x = as.numeric(condition) + .15, y = prob, fill = condition), outlier.shape = NA, alpha = 0.8, width = .1, colour = "black") +
scale_fill_viridis(option = "plasma", begin = 0.4, end = 0.85, discrete = TRUE) + scale_color_viridis(option = "plasma", begin = 0.4, end = 0.85, discrete = TRUE) +
guides(fill = guide_legend(title = "Training condition")) +
labs(x = "Training condition", y = "Choice probability \n", fill = "\n") + theme_pubr(base_family = "Palatino", base_size = 18) + theme(legend.text = element_text(size = 18))
ggsave("graphs/choices.png", dpi = 300, width = 10, height = 7)
choices <- subset(all_data, select = c(2, 43:45))
choices <- tidyr::gather(choices, 2:4, key = "condition", value = "prob")
choices$condition <- as.factor(choices$condition)
levels(choices$condition) <- c("Control", "Go", "No-go")
ggplot(choices, aes(x = condition, y = prob, fill = condition)) +
geom_point(aes(x = condition, y = prob, colour = condition), position = position_jitter(width = .05), size = 2, shape = 20, alpha = 0.8, show.legend = FALSE) +
geom_boxplot(aes(x = as.numeric(condition) + .15, y = prob, fill = condition), outlier.shape = NA, alpha = 0.8, width = .1, colour = "black") +
scale_fill_viridis(option = "plasma", begin = 0.4, end = 0.85, discrete = TRUE) + scale_color_viridis(option = "plasma", begin = 0.4, end = 0.85, discrete = TRUE) +
guides(fill = guide_legend(title = "Training condition")) +
labs(x = "Training condition", y = "Choice probability \n", fill = "\n") + theme_pubr(base_family = "Palatino", base_size = 18) + theme(legend.text = element_text(size = 18))
ggsave("graphs/choices.png", dpi = 300, width = 10, height = 6)
sum_rat <- summarySE(ratings, measurevar = "Rating", groupvars = c("Training_condition", "Time"))
ratings <- melt(ratings_sum, variable.name = "Training_condition", measure.vars = c("Pre.Liking.Go", "Pre.Liking.Nogo", "Pre.Liking.Filler", "Post.Liking.Go", "Post.Liking.Nogo", "Post.Liking.Filler"), value.name = "Rating")
ratings$Time <- as.factor(ifelse(ratings$Training_condition == "Pre.Liking.Go" | ratings$Training_condition == "Pre.Liking.Nogo" | ratings$Training_condition == "Pre.Liking.Filler", "Pre", "Post"))
ratings$Training_condition <- as.factor(ifelse(ratings$Training_condition == "Pre.Liking.Go" | ratings$Training_condition == "Post.Liking.Go", "Go", ifelse(ratings$Training_condition == "Pre.Liking.Nogo" | ratings$Training_condition == "Post.Liking.Nogo", "No-go", "Control")))
ratings$Time <- factor(ratings$Time, levels = c("Pre", "Post"))
sum_rat <- summarySE(ratings, measurevar = "Rating", groupvars = c("Training_condition", "Time"))
ggplot(ratings, aes(x = Training_condition, y = Rating, fill = Time)) +
geom_flat_violin(aes(fill = Time), position = position_nudge(x = .1, y = 0), adjust = 1.5, trim = TRUE, alpha = 0.7, colour = NA, show.legend = FALSE) +
geom_point(aes(x = as.numeric(Training_condition) - .15, y = Rating, colour = Time), position = position_jitter(width = .05), size = 1.25, shape = 20, alpha = 0.8, show.legend = FALSE) +
geom_boxplot(aes(x = Training_condition, y = Rating, fill = Time), outlier.shape = NA, alpha = 0.8, width = .1, colour = "black") +
scale_fill_viridis(option = "plasma", begin = 0.4, end = 0.85, discrete = TRUE) + scale_color_viridis(option = "plasma", begin = 0.4, end = 0.85, discrete = TRUE) +
geom_line(data = sum_rat, aes(x = as.numeric(Training_condition) + .1, y = Rating_mean, group = Time, colour = Time), linetype = 3, show.legend = FALSE, size = 0.75) +
labs(x = "Training condition \n", y = "Mean liking ratings \n") + theme_pubr(base_family = "Palatino", base_size = 14) +
guides(fill = guide_legend(title = "Time")) + theme(legend.text = element_text(size = 14)) +
geom_point(data = sum_rat, aes(x = as.numeric(Training_condition) + .1, y = Rating_mean, group = Time, colour = Time), shape = 22, size = 2, color = "black")
ggsave("graphs/liking_raincloud.png", dpi = 300, width = 10, height = 6)
GNG_sum$DNG <- GNG_sum$NoGo.PC - GNG_sum$FillerNoGo.PC
ggplot(GNG_sum, aes(y = NoGo.PC, x = FillerNoGo.PC)) +
geom_abline(intercept = 0, slope = 1, alpha = 0.6, color = "black", lwd = 0.55) +
geom_point(size = 3, alpha = 0.6, aes(color = DNG), position = "jitter") + labs(y = expression(PCsignal[nogo]), x = expression(PCsignal["control-nogo"])) +
scale_color_viridis_c(option = "viridis", guide = "colourbar", space = "Lab", begin = 0, end = 0.85, direction = 1) + theme_pubr(base_family = "Palatino", base_size = 18, margin = TRUE, legend = "right") + labs(color = ~Delta) + ylim(0.7, 1.02) + xlim(0.7, 1.02) + theme(legend.text.align = 1) + theme(legend.text = element_text(size = 16)) +
ggsave("graphs/PCsignal.png", dpi = 300, width = 10, height = 6)
p1 <- ggplot(retest, aes(y = Pre_Bias, x = Post_Bias)) +
geom_point(size = 3, alpha = 0.6, aes(color = D_Bias)) +
geom_abline(intercept = 0, slope = 1, alpha = 0.6, color = "black", lwd = 0.55) +
labs(y = expression(AAT["pre"] ~ (ms)), x = expression(AAT["post"] ~ (ms))) +
scale_color_viridis_c(option = "magma", guide = "colourbar", space = "Lab", begin = 0, end = 0.85, direction = 1) +
labs(color = "ΔAAT\n(ms)") + ylim(-300, 200) + xlim(-300, 200) +
theme(legend.text = element_text(size = 16)) +
facet_grid(~measure, space = "free_x") + theme_cowplot(font_family = "Palatino", font_size = 18) +
theme(strip.text.x = element_text(margin = margin(0.3, 0, 0.3, 0, "cm")), legend.text.align = 1, panel.spacing = unit(3, "lines"))
# legend.position = "bottom", legend.spacing.x = element_text(size=2)
# legend.justification = c(1, 1)
p1
ggsave("graphs/test_retest.png", dpi = 300, width = 10, height = 6)
View(gng_graphs)
gng_pes <- lapply(gng, transform, accuracy = as.integer(ifelse(values.gng_correct==1, "0", "1")))
block_PEs <- ldply(gng_pes, fun_gng_PEs_blocks)
block_PEs <- subset(block_PEs, .id %in% inclIDs)
block_PEs_graph <- tidyr::gather(block_PEs, 2:5, key="condition", value="PC")
View(block_PEs_graph)
gng_graphs <- subset(GNG_sum, select=c(1, 9, 11))
gng_graphs <- tidyr::gather(gng_graphs, c(2:3), key="condition", value="PCsignal")
View(gng_graphs)
gng_graphs$condition <- ifelse(gng_graphs$condition == "FillerNoGo.PC", "Signal (control)", "Signal (no-go)")
View(gng_graphs)
ggplot(gng_graphs, aes(x = condition, y = PCsignal, fill = condition)) +
geom_boxplot(aes(x = condition, y = PCsignal, fill = condition), outlier.shape = NA, alpha = 0.85, width = .1, colour = "black") +
scale_color_viridis(option = "inferno", begin = 0.45, end = 0.87, discrete = TRUE) +
scale_fill_viridis(option = "inferno", begin = 0.45, end = 0.87, discrete = TRUE) +
geom_flat_violin(aes(fill = condition), position = position_nudge(x = .3, y = 0), adjust = 1.5, trim = TRUE, alpha = 0.7, colour = NA, show.legend = FALSE) +
theme_pubr(base_size = 18, base_family = "Palatino", margin = TRUE) + guides(fill = guide_legend(title = "Trial type")) +
geom_point(data = gng_graphs, aes(x = as.numeric(as.factor(condition)) + .2, y = PCsignal, group = condition, colour = condition), alpha = 0.6, size = 1.25, show.legend = FALSE, position = position_jitter(width = 0.05)) +
labs(x = "", y = "Proportion of correct responses on signal trials") + theme(legend.text = element_text(size = 18)) +
theme(
axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank()
) + coord_flip() + scale_x_discrete(position = "left")
ggsave("graphs/PCsignal.png", dpi = 300, width = 10, height = 7)
ggsave("graphs/PCsignal.png", dpi = 300, width = 10, height = 6)
