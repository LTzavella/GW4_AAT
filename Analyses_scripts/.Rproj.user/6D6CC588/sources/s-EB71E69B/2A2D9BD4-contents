---
title: "Graphs"
author: "Loukia Tzavella"
date: "14/07/2019"
output: html_document
---

## Raincloud plots

* Code copied and adapted from https://github.com/RainCloudPlots/RainCloudPlots/blob/master/tutorial_R/raincloud_tutorial_r.Rmd 

**TO BE CITED IN THE MAIN PAPER** 
Allen M, Poggiali D, Whitaker K et al. Raincloud plots: a multi-platform tool for robust data visualization [version 1; peer review: awaiting peer review]. Wellcome Open Res 2019, 4:63 (https://doi.org/10.12688/wellcomeopenres.15191.1)

Allen M, Poggiali D, Whitaker K, Marshall TR, Kievit R. (2018) RainCloudPlots tutorials and codebase (Version v1.0). Zenodo. http://doi.org/10.5281/zenodo.1402959


```{r, include = TRUE, echo = TRUE}
packages <- c("ggplot2", "dplyr", "lavaan", "plyr", "cowplot", "rmarkdown", 
              "readr", "caTools", "bitops")
if (length(setdiff(packages, rownames(installed.packages()))) > 0) {
  install.packages(setdiff(packages, rownames(installed.packages())))  
}
```
```{r, include = TRUE, echo = TRUE}
library(cowplot)
library(dplyr)
library(readr)
library(reshape2)
library(viridis)
library(ggpubr)
source("Rainclouds.R")
```
* Graph 1: raincloud plot of AAT bias scores pre and post training according to training condition. 

```{r}
graph_data <- melt(all_data, variable.name="Training_condition", measure.vars=c("Pre_Go_bias", "Pre_NoGo_bias", "Pre_Filler_bias", "Post_Go_bias", "Post_NoGo_bias", "Post_Filler_bias"), value.name = "Bias_score")

graph_data$Time <- as.factor(ifelse(graph_data$Training_condition=="Pre_Go_bias" | graph_data$Training_condition =="Pre_NoGo_bias" | graph_data$Training_condition== "Pre_Filler_bias", "Pre", "Post"))

graph_data$Training_condition <- as.factor(ifelse(graph_data$Training_condition=="Pre_Go_bias"|graph_data$Training_condition=="Post_Go_bias", "Go", ifelse(graph_data$Training_condition=="Pre_NoGo_bias"|graph_data$Training_condition=="Post_NoGo_bias", "No-go", "Control")))

graph_data$Time <- factor(graph_data$Time , levels = c("Pre", "Post"))
```

```{r}
sum_bias <- summarySE(graph_data, measurevar = "Bias_score", groupvars=c("Training_condition", "Time"))
```

```{r}
ggplot(graph_data, aes(x=Training_condition, y=Bias_score, fill=Time))+ 
  geom_flat_violin(aes(fill=Time), position=position_nudge(x=.1, y=0), adjust = 1.5, trim = FALSE, alpha = 0.7, colour = NA, show.legend = FALSE)+
  geom_point(aes(x=as.numeric(Training_condition)-.15, y=Bias_score, colour=Time), position=position_jitter(width = .05), size = 1.25, shape = 20, alpha=0.8, show.legend = FALSE)+
  geom_boxplot(aes(x = Training_condition, y = Bias_score, fill = Time),outlier.shape = NA, alpha = 0.8, width = .1, colour = "black")+
  scale_fill_viridis(option = "magma",begin=0.3, end=0.65, discrete = TRUE) + scale_color_viridis(option = "magma",begin=0.3, end=0.65, discrete = TRUE)+
  geom_line(data = sum_bias, aes(x = as.numeric(Training_condition)+.1, y = Bias_score_mean, group = Time, colour = Time), linetype = 3, show.legend = FALSE) +
  labs(x="Training condition", y = "Bias scores (ms)", fill="\n") + theme_pubr(base_family = "Palatino", base_size = 14) + 
  guides(fill=guide_legend(title="Time")) + theme(legend.text = element_text(size=14))


  # geom_errorbar(data = sum_bias, aes(x = as.numeric(Training_condition)+.1, y = Bias_score_mean, group = Time, colour = Time, ymin = Bias_score_mean-sd, ymax = Bias_score_mean+s), width = .05)
  #geom_point(data = sum_bias, aes(x = as.numeric(Training_condition)+.1, y = Bias_score_mean, group = Time, colour = Time), shape = 18)

ggsave('graphs/bias_raincloud.png', dpi = 300, width = 10, height=7)
```

* Graph 2: Liking ratings for all foods and their exemplars between training conditions- will show inconsistencies too for some items 

P.S. Try Veling's recommendation for exclusions. 



```{r}
mult <- ggplot(merged, aes(x=Group, y=X.S, fill=Group, color=Group)) + geom_point(size=2, alpha=0.5, position = position_jitter(w=0.05), inherit.aes = TRUE, show.legend = FALSE) + facet_grid(rating ~ healthiness)  + labs(x=" ", y = "Mean ratings", fill="\n") +scale_x_discrete(labels=c("Go (control)", "Stop", "Stop-change")) + ylim(0,100) + stat_summary(fun.data=mean_sdl, fun.args = list(mult=1), geom="pointrange",color="black",size=0.8, shape=15,position = position_dodge(1), alpha=0.4, show.legend=FALSE) + theme_cowplot() + geom_flat_violin(position = position_nudge(x=-0.1, y=0), adjust=2, show.legend = FALSE) + geom_boxplot(aes(x = Group, y = X.S, fill = Group),outlier.shape = NA, alpha = .5, width = .1, colour = "black", show.legend = FALSE) + scale_fill_viridis(option = "magma",begin=0.45, end=0.8, discrete = TRUE) + scale_color_viridis(option = "magma",begin=0.45, end=0.8, discrete = TRUE)

mult
```
