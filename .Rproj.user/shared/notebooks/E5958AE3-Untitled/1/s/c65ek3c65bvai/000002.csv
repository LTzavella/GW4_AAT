"0","```r
#Recode accuracy values to only have 1s (correct) and 0s (incorrect)

main <- lapply(main, transform, accuracy = ifelse(values.ns_accuracy==1 & (blockcode==\"go_training\"|blockcode==\"go_test\"|blockcode==\"go_test_end\"), \"1\",
        ifelse(values.ns_accuracy==1 & (blockcode==\"stop_training\"|blockcode==\"change_training\") & values.frame_go==112, \"1\", 
        ifelse(values.ss_accuracy==1 & blockcode==\"stop_training\" & values.frame_signal==112, \"1\", 
        ifelse(values.sc_accuracy==1 & blockcode==\"change_training\" & values.frame_signal==112, \"1\", \"0\")))))

#Change accuracy variable structure into numeric format 

main <- lapply(main, transform, accuracy = as.numeric(as.character(accuracy)))

#Split data by group

group1 <- main[sapply(main, function(x) all(x$values.current_group == 1))]
group2 <- main[sapply(main, function(x) all(x$values.current_group == 2))]
group3 <- main[sapply(main, function(x) all(x$values.current_group == 3))]

#GTR:   Proportion of correct go (no-signal) trials in the training blocks
#GPR:   Proportion of correct go (no-signal) trials in the pre-training go-test blocks [not used for exclusions]
#GPO:   Proportion of correct go (no-signal) trials in the post-training go-test blocks [not used for exclusions]
#SS:    Proportion of sucessful stops in training (signal trials) 
#CS:    Proportion of successful changes in training (signal trials)

group1_means <- ldply(group1, function(x) {c(GTR = mean(x$accuracy[(x$values.frame_go==112|x$values.frame_signal==112) & x$blockcode==\"go_training\"]), 
                                             GPR = mean(x$accuracy[x$values.frame_go==112 & x$blockcode==\"go_test\"]), 
                                             GPO = mean(x$accuracy[x$values.frame_go==112 & x$blockcode==\"go_test_end\"]))})

group2_means <- ldply(group2, function(x) {c(GTR = mean(x$accuracy[x$values.frame_go==112 & x$blockcode==\"stop_training\"]), 
                                             GPR = mean(x$accuracy[x$values.frame_go==112 & x$blockcode==\"go_test\"]), 
                                             GPO = mean(x$accuracy[x$values.frame_go==112 & x$blockcode==\"go_test_end\"]),
                                             SS = mean(x$accuracy[x$values.frame_signal==112 & x$blockcode==\"stop_training\"]))})

group3_means <- ldply(group3, function(x) {c(GTR = mean(x$accuracy[x$values.frame_go==112 & x$blockcode==\"change_training\"]), 
                                             GPR = mean(x$accuracy[x$values.frame_go==112 & x$blockcode==\"go_test\"]), 
                                             GPO = mean(x$accuracy[x$values.frame_go==112 & x$blockcode==\"go_test_end\"]),
                                             CS = mean(x$accuracy[x$values.frame_signal==112 & x$blockcode==\"change_training\"]))})

#Obtain IDs for eligible participants in each group

IDs <- c(unique(group1_means$.id[group1_means$GTR>=0.85]),unique(group2_means$.id[group2_means$GTR>=0.85 & group2_means$SS >=0.65]),unique(group3_means$.id[group3_means$GTR>=0.85 & group3_means$CS >=0.50]))

main <- main[sapply(main, function (x) any(x$unique_ID %in% IDs))]

#Create data frames for tastiness and desire to eat ratings (complete responses only)

tas <- ldply(main, subset, (blockcode==\"tastiness\" & values.marker==2))
des <- ldply(main, subset, (blockcode==\"desiretoeat\" & values.marker==2))

#Run function for removing duplicate items 
rm_d <- function(data) {
  x <- unique(data[duplicated(data$values.eval_jpg), ])
  r <- as.numeric(rownames(x))
  data <- subset(data, !(rownames(data) %in% r))
  return(data)
}

#Apply function to the two datasets
tas <- gapply(tas, FUN = rm_d, groups=tas$unique_ID)
des <- gapply(des, FUN = rm_d, groups=des$unique_ID)
```"
